/**

@page DevelopersCodingStyleSpecificitiesPage Coding Style : FEVV specificities

### Filters should explictly mention all read/written properties they use in their signature
When defining the signature of a filter, a developer can choose among the large spectrum of signatures ranging in between the following two boundary strategies:
 - **argument aggregation**: minimize the number of arguments (possibly down to a single mesh argument)
 - **argument explicitness**: make explicit and separate each required argument 

Let us consider the signature of the \ref calculate_scaling() filter that goes
```
template< ... >
void FEVV::Filters::calculate_scaling( const HalfedgeGraph & g,
                                             PointMap pm,
                                             ... )   
```
and gets usually called (refer e.g. to \ref testCalculateScalingPolyhedron()) in the following manner
```
Mesh m;

calculate_scaling( m, get(boost::vertex_point, m), ... );
```
and falls into the last "argument explictness" strategy. 
The argument aggregation version would have a signature of the form
```
template< ... >
void FEVV::Filters::calculate_scaling( const HalfedgeGraph & g )
{
   // First extract the pointmap from the mesh
   PointMap pm = get(boost::vertex_point, m);
}
```
where the implementation starts with extracting the required attributes
from the mesh.

The **coding style choses to promote the argument explicitness** for the following reasons:
 - an argument explicit signature clarifies the required attributes (input and output) without resolving at reading the filters implementation,
 - the `PointMap` attribute of a mesh is a bit of a counter-example because all mesh implementations embed this attribute within the mesh (the mesh and its geometry a bundled together). Hence passing around the mesh suffices. But most of other usefull/current mesh attributes are not stored within the mesh and live aside thus requiring the filter call to explictly pass such attributes as arguments.
 - the caller has the ability to substitute the mesh attribute with any other attribute (of the same type) of his choice. For example one can easily provide an altered geometry (out of the current one of the mesh) and invoke the filter with this alternative data set.

Note: the above concern relates to the transmission of mesh attributes (as property maps). The storage of such attributes is another concern (refer to issue 111).

*/
